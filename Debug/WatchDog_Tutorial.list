
WatchDog_Tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001134  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013a8  080013a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080013a8  080013a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013a8  080013a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013ac  080013ac  000113ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080013b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001418  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001418  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b81  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ca3  00000000  00000000  00024c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000258c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00025a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104d4  00000000  00000000  00025af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029a1  00000000  00000000  00035fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005685c  00000000  00000000  0003896d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008f1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000890  00000000  00000000  0008f21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080012bc 	.word	0x080012bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080012bc 	.word	0x080012bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Console_Init>:

#include "Console.h"


  void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]

	if(port == USART1)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a4a      	ldr	r2, [pc, #296]	; (80003c8 <Console_Init+0x138>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d12e      	bne.n	8000300 <Console_Init+0x70>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002a2:	4b4a      	ldr	r3, [pc, #296]	; (80003cc <Console_Init+0x13c>)
 80002a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a6:	4a49      	ldr	r2, [pc, #292]	; (80003cc <Console_Init+0x13c>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002ae:	2307      	movs	r3, #7
 80002b0:	228c      	movs	r2, #140	; 0x8c
 80002b2:	2109      	movs	r1, #9
 80002b4:	4846      	ldr	r0, [pc, #280]	; (80003d0 <Console_Init+0x140>)
 80002b6:	f000 f8f9 	bl	80004ac <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_RX);
 80002ba:	2307      	movs	r3, #7
 80002bc:	228c      	movs	r2, #140	; 0x8c
 80002be:	210a      	movs	r1, #10
 80002c0:	4843      	ldr	r0, [pc, #268]	; (80003d0 <Console_Init+0x140>)
 80002c2:	f000 f8f3 	bl	80004ac <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80002d2:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <Console_Init+0x144>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	0112      	lsls	r2, r2, #4
 80002da:	fbb3 f3f2 	udiv	r3, r3, r2
 80002de:	011b      	lsls	r3, r3, #4
 80002e0:	461a      	mov	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f043 0208 	orr.w	r2, r3, #8
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	f043 0204 	orr.w	r2, r3, #4
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60da      	str	r2, [r3, #12]
	}




}
 80002fe:	e05e      	b.n	80003be <Console_Init+0x12e>
	else if(port == USART2)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a35      	ldr	r2, [pc, #212]	; (80003d8 <Console_Init+0x148>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d128      	bne.n	800035a <Console_Init+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000308:	4b30      	ldr	r3, [pc, #192]	; (80003cc <Console_Init+0x13c>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <Console_Init+0x13c>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000312:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 8000314:	2307      	movs	r3, #7
 8000316:	228c      	movs	r2, #140	; 0x8c
 8000318:	2102      	movs	r1, #2
 800031a:	482d      	ldr	r0, [pc, #180]	; (80003d0 <Console_Init+0x140>)
 800031c:	f000 f8c6 	bl	80004ac <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_RX);
 8000320:	2307      	movs	r3, #7
 8000322:	228c      	movs	r2, #140	; 0x8c
 8000324:	2103      	movs	r1, #3
 8000326:	482a      	ldr	r0, [pc, #168]	; (80003d0 <Console_Init+0x140>)
 8000328:	f000 f8c0 	bl	80004ac <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
		port -> BRR = 0x1388;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f241 3288 	movw	r2, #5000	; 0x1388
 800033e:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f043 0208 	orr.w	r2, r3, #8
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f043 0204 	orr.w	r2, r3, #4
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
}
 8000358:	e031      	b.n	80003be <Console_Init+0x12e>
	else if(port == USART6)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <Console_Init+0x14c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d12d      	bne.n	80003be <Console_Init+0x12e>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <Console_Init+0x13c>)
 8000364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000366:	4a19      	ldr	r2, [pc, #100]	; (80003cc <Console_Init+0x13c>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 800036e:	2308      	movs	r3, #8
 8000370:	228c      	movs	r2, #140	; 0x8c
 8000372:	210b      	movs	r1, #11
 8000374:	4816      	ldr	r0, [pc, #88]	; (80003d0 <Console_Init+0x140>)
 8000376:	f000 f899 	bl	80004ac <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 800037a:	2308      	movs	r3, #8
 800037c:	228c      	movs	r2, #140	; 0x8c
 800037e:	210c      	movs	r1, #12
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <Console_Init+0x140>)
 8000382:	f000 f893 	bl	80004ac <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <Console_Init+0x144>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	0112      	lsls	r2, r2, #4
 800039a:	fbb3 f3f2 	udiv	r3, r3, r2
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	f043 0208 	orr.w	r2, r3, #8
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	f043 0204 	orr.w	r2, r3, #4
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60da      	str	r2, [r3, #12]
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40011000 	.word	0x40011000
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40020000 	.word	0x40020000
 80003d4:	20000000 	.word	0x20000000
 80003d8:	40004400 	.word	0x40004400
 80003dc:	40011400 	.word	0x40011400

080003e0 <printConsole>:

  int printConsole(USART_TypeDef *port,char *msg, ...)
 {
 80003e0:	b40e      	push	{r1, r2, r3}
 80003e2:	b580      	push	{r7, lr}
 80003e4:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 80003e8:	b089      	sub	sp, #36	; 0x24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	f107 0320 	add.w	r3, r7, #32
 80003f0:	3b1c      	subs	r3, #28
 80003f2:	6018      	str	r0, [r3, #0]

 char buff[10000];
 //	#ifdef DEBUG_UART

 	va_list args;
 	va_start(args, msg);
 80003f4:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80003f8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80003fc:	f107 0320 	add.w	r3, r7, #32
 8000400:	3b18      	subs	r3, #24
 8000402:	601a      	str	r2, [r3, #0]
 	vsprintf(buff, msg, args);
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	3b18      	subs	r3, #24
 800040a:	f107 0020 	add.w	r0, r7, #32
 800040e:	3814      	subs	r0, #20
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000416:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800041a:	6819      	ldr	r1, [r3, #0]
 800041c:	f000 fb36 	bl	8000a8c <vsiprintf>

 	for(int i = 0; i<= strlen(buff)-1; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000426:	f102 021c 	add.w	r2, r2, #28
 800042a:	6013      	str	r3, [r2, #0]
 800042c:	e024      	b.n	8000478 <printConsole+0x98>
 	{
 		port -> DR = buff[i];
 800042e:	f107 0320 	add.w	r3, r7, #32
 8000432:	3b14      	subs	r3, #20
 8000434:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000438:	f102 021c 	add.w	r2, r2, #28
 800043c:	6812      	ldr	r2, [r2, #0]
 800043e:	4413      	add	r3, r2
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	f107 0320 	add.w	r3, r7, #32
 8000448:	3b1c      	subs	r3, #28
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 		while (!(port->SR & USART_SR_TXE));
 800044e:	bf00      	nop
 8000450:	f107 0320 	add.w	r3, r7, #32
 8000454:	3b1c      	subs	r3, #28
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f6      	beq.n	8000450 <printConsole+0x70>
 	for(int i = 0; i<= strlen(buff)-1; i++)
 8000462:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000466:	f103 031c 	add.w	r3, r3, #28
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000472:	f102 021c 	add.w	r2, r2, #28
 8000476:	6013      	str	r3, [r2, #0]
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	3b14      	subs	r3, #20
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff feae 	bl	80001e0 <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	1e5a      	subs	r2, r3, #1
 8000488:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800048c:	f103 031c 	add.w	r3, r3, #28
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	d2cb      	bcs.n	800042e <printConsole+0x4e>
 	}

 	return 1;
 8000496:	2301      	movs	r3, #1
 //	#endif
 }
 8000498:	4618      	mov	r0, r3
 800049a:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 800049e:	3724      	adds	r7, #36	; 0x24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004a6:	b003      	add	sp, #12
 80004a8:	4770      	bx	lr
	...

080004ac <GPIO_Pin_Setup>:

#include "GPIO.h"


void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	4608      	mov	r0, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	461a      	mov	r2, r3
 80004ba:	4603      	mov	r3, r0
 80004bc:	70fb      	strb	r3, [r7, #3]
 80004be:	460b      	mov	r3, r1
 80004c0:	70bb      	strb	r3, [r7, #2]
 80004c2:	4613      	mov	r3, r2
 80004c4:	707b      	strb	r3, [r7, #1]
	if(Port == GPIOA)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a43      	ldr	r2, [pc, #268]	; (80005d8 <GPIO_Pin_Setup+0x12c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <GPIO_Pin_Setup+0x130>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a42      	ldr	r2, [pc, #264]	; (80005dc <GPIO_Pin_Setup+0x130>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	e02a      	b.n	8000532 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOB)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a40      	ldr	r2, [pc, #256]	; (80005e0 <GPIO_Pin_Setup+0x134>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 80004e4:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <GPIO_Pin_Setup+0x130>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a3c      	ldr	r2, [pc, #240]	; (80005dc <GPIO_Pin_Setup+0x130>)
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
 80004f0:	e01f      	b.n	8000532 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOC)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <GPIO_Pin_Setup+0x138>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <GPIO_Pin_Setup+0x130>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a37      	ldr	r2, [pc, #220]	; (80005dc <GPIO_Pin_Setup+0x130>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	e014      	b.n	8000532 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOD)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <GPIO_Pin_Setup+0x13c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <GPIO_Pin_Setup+0x130>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a31      	ldr	r2, [pc, #196]	; (80005dc <GPIO_Pin_Setup+0x130>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
 800051c:	e009      	b.n	8000532 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOE)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a32      	ldr	r2, [pc, #200]	; (80005ec <GPIO_Pin_Setup+0x140>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <GPIO_Pin_Setup+0x86>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <GPIO_Pin_Setup+0x130>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <GPIO_Pin_Setup+0x130>)
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
	}

	Port -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	78ba      	ldrb	r2, [r7, #2]
 8000538:	0992      	lsrs	r2, r2, #6
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	78fa      	ldrb	r2, [r7, #3]
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
	Port -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	78ba      	ldrb	r2, [r7, #2]
 8000552:	0912      	lsrs	r2, r2, #4
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	f002 0103 	and.w	r1, r2, #3
 800055a:	78fa      	ldrb	r2, [r7, #3]
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	78ba      	ldrb	r2, [r7, #2]
 800056c:	0892      	lsrs	r2, r2, #2
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	f002 0103 	and.w	r1, r2, #3
 8000574:	78fa      	ldrb	r2, [r7, #3]
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	431a      	orrs	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	609a      	str	r2, [r3, #8]
	Port -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	78ba      	ldrb	r2, [r7, #2]
 8000588:	f002 0103 	and.w	r1, r2, #3
 800058c:	78fa      	ldrb	r2, [r7, #3]
 800058e:	0052      	lsls	r2, r2, #1
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60da      	str	r2, [r3, #12]

	if(pin < 8)Port -> AFR[0] |= ( alternate_function << (4 * (pin)));
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b07      	cmp	r3, #7
 800059e:	d80a      	bhi.n	80005b6 <GPIO_Pin_Setup+0x10a>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6a1b      	ldr	r3, [r3, #32]
 80005a4:	7879      	ldrb	r1, [r7, #1]
 80005a6:	78fa      	ldrb	r2, [r7, #3]
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	621a      	str	r2, [r3, #32]
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));

	if (alternate_function == NONE) {}
}
 80005b4:	e00a      	b.n	80005cc <GPIO_Pin_Setup+0x120>
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ba:	7879      	ldrb	r1, [r7, #1]
 80005bc:	78fa      	ldrb	r2, [r7, #3]
 80005be:	3a08      	subs	r2, #8
 80005c0:	0092      	lsls	r2, r2, #2
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	431a      	orrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020400 	.word	0x40020400
 80005e4:	40020800 	.word	0x40020800
 80005e8:	40020c00 	.word	0x40020c00
 80005ec:	40021000 	.word	0x40021000

080005f0 <IWDG_Init>:
 *               0  (if no error occurs)
 * ----------------------------------------------------------------------------------------------------
 */

int IWDG_Init(int32_t timeout)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	// Variable declaration.
	int __timer;
	int __timeout;

	//Variable initialization.
	__timer = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
	__timeout = 1000;
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	60bb      	str	r3, [r7, #8]

	//Check scope of importing parameter.

	if (timeout > 4095)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000608:	db02      	blt.n	8000610 <IWDG_Init+0x20>
	{
#if IWD_DEBUG
		printConsole(USART1, "Error: Importing timeout value out of bounds \r\n");
		printConsole(USART1, "Error: timeout = %d\r\n",timeout);
#endif
		return -1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	e03f      	b.n	8000690 <IWDG_Init+0xa0>
	}

	// 0x5555 to KR value allows configuration of Independent Watchdog Timer registers.
	IWDG -> KR = 0x5555;
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <IWDG_Init+0xac>)
 8000612:	f245 5255 	movw	r2, #21845	; 0x5555
 8000616:	601a      	str	r2, [r3, #0]

	//Wait till PVU bit is low or till timer overflows.
	while( ((IWDG -> SR & IWDG_SR_PVU) == IWDG_SR_PVU) && (__timer < __timeout))
 8000618:	e002      	b.n	8000620 <IWDG_Init+0x30>
	{
		// increment timer.
		__timer ++;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
	while( ((IWDG -> SR & IWDG_SR_PVU) == IWDG_SR_PVU) && (__timer < __timeout))
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <IWDG_Init+0xac>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b01      	cmp	r3, #1
 800062a:	d103      	bne.n	8000634 <IWDG_Init+0x44>
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf2      	blt.n	800061a <IWDG_Init+0x2a>
	}
	// Check if timer has overflowed. Return back to main program.
	if(__timer > __timeout)
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	dd02      	ble.n	8000642 <IWDG_Init+0x52>
	{
		return -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	e026      	b.n	8000690 <IWDG_Init+0xa0>
	}

	// Set Prescaler to 1/32. Minimum
	IWDG -> PR |= IWDG_PR_PR_0 | IWDG_PR_PR_1;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <IWDG_Init+0xac>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <IWDG_Init+0xac>)
 8000648:	f043 0303 	orr.w	r3, r3, #3
 800064c:	6053      	str	r3, [r2, #4]

	//Wait till RVU bit is low or till timer overflows.
	__timer = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
	while( ((IWDG -> SR & IWDG_SR_RVU) == IWDG_SR_RVU) && (__timer < __timeout))
 8000652:	e002      	b.n	800065a <IWDG_Init+0x6a>
	{
		// increment timer.
		__timer ++;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	while( ((IWDG -> SR & IWDG_SR_RVU) == IWDG_SR_RVU) && (__timer < __timeout))
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <IWDG_Init+0xac>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b02      	cmp	r3, #2
 8000664:	d103      	bne.n	800066e <IWDG_Init+0x7e>
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbf2      	blt.n	8000654 <IWDG_Init+0x64>
	}
	// Check if timer has overflowed. Return back to main program.
	if(__timer > __timeout)
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	429a      	cmp	r2, r3
 8000674:	dd02      	ble.n	800067c <IWDG_Init+0x8c>
	{
		return -1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e009      	b.n	8000690 <IWDG_Init+0xa0>
	}

	IWDG -> RLR = timeout;
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <IWDG_Init+0xac>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6093      	str	r3, [r2, #8]

	//Stop the watchdog during debugging

	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <IWDG_Init+0xb0>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <IWDG_Init+0xb0>)
 8000688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068c:	6093      	str	r3, [r2, #8]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40003000 	.word	0x40003000
 80006a0:	e0042000 	.word	0xe0042000

080006a4 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	SystemInit();
 80006aa:	f000 f8e9 	bl	8000880 <SystemInit>
	uint8_t pll_m = 25;
 80006ae:	2319      	movs	r3, #25
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 192; //192
 80006b2:	23c0      	movs	r3, #192	; 0xc0
 80006b4:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	713b      	strb	r3, [r7, #4]
//	uint8_t pll_m = 16;
//	uint8_t pll_n = 138; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 4;

	RCC->PLLCFGR = 0x00000000;
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]

	RCC -> CR |= RCC_CR_HSEON;
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80006d0:	bf00      	nop
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f9      	beq.n	80006d2 <MCU_Clock_Setup+0x2e>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <MCU_Clock_Setup+0xf8>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <MCU_Clock_Setup+0xfc>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <MCU_Clock_Setup+0xfc>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f4:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MCU_Clock_Setup+0x100>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <MCU_Clock_Setup+0x100>)
 80006fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000700:	f043 0303 	orr.w	r3, r3, #3
 8000704:	6013      	str	r3, [r2, #0]
			FLASH_ACR_LATENCY_3WS;
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	793a      	ldrb	r2, [r7, #4]
 800070c:	0611      	lsls	r1, r2, #24
 800070e:	797a      	ldrb	r2, [r7, #5]
 8000710:	0412      	lsls	r2, r2, #16
 8000712:	4311      	orrs	r1, r2
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	0192      	lsls	r2, r2, #6
 8000718:	4311      	orrs	r1, r2
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	430a      	orrs	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MCU_Clock_Setup+0xf8>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6053      	str	r3, [r2, #4]
//    RCC->PLLCFGR = 0x4403019;
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MCU_Clock_Setup+0xf8>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000744:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <MCU_Clock_Setup+0xf8>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	6093      	str	r3, [r2, #8]
//	RCC -> APB2ENR |= 0x4000;
	RCC -> CR |= RCC_CR_PLLON;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000758:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800075a:	bf00      	nop
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MCU_Clock_Setup+0xf8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0f9      	beq.n	800075c <MCU_Clock_Setup+0xb8>
//	RCC -> CR |= RCC_CR_PLLI2SON;
//	while(!(RCC->CR & RCC_CR_PLLI2SRDY)){}
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MCU_Clock_Setup+0xf8>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <MCU_Clock_Setup+0xf8>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000774:	bf00      	nop
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	2b08      	cmp	r3, #8
 8000780:	d1f9      	bne.n	8000776 <MCU_Clock_Setup+0xd2>
SystemCoreClockUpdate();
 8000782:	f000 f893 	bl	80008ac <SystemCoreClockUpdate>
//SysTick_Config(SystemCoreClock/1000);
//APB1CLK_SPEED = SystemAPB1_Clock_Speed();
//APB2CLK_SPEED = SystemAPB2_Clock_Speed();
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MCU_Clock_Setup+0xf8>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <MCU_Clock_Setup+0xf8>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <Delay_Config+0x2c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <Delay_Config+0x2c>)
 80007b4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80007b8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <Delay_Config+0x2c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <Delay_Config+0x2c>)
 80007c2:	2205      	movs	r2, #5
 80007c4:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <main>:




int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80007de:	f7ff ff61 	bl	80006a4 <MCU_Clock_Setup>
	Delay_Config();
 80007e2:	f7ff ffe1 	bl	80007a8 <Delay_Config>
	Console_Init(USART1, 9600);
 80007e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80007ea:	4808      	ldr	r0, [pc, #32]	; (800080c <main+0x34>)
 80007ec:	f7ff fd50 	bl	8000290 <Console_Init>

	int val;
    /* Loop forever */


	val = IWDG_Init(10000);
 80007f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007f4:	f7ff fefc 	bl	80005f0 <IWDG_Init>
 80007f8:	6078      	str	r0, [r7, #4]
	if(val == -1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d103      	bne.n	800080a <main+0x32>
	{
		printConsole(USART1, "Error: IWDG Init failed. Line number : 104 \r\n");
 8000802:	4903      	ldr	r1, [pc, #12]	; (8000810 <main+0x38>)
 8000804:	4801      	ldr	r0, [pc, #4]	; (800080c <main+0x34>)
 8000806:	f7ff fdeb 	bl	80003e0 <printConsole>
	}
	for(;;);
 800080a:	e7fe      	b.n	800080a <main+0x32>
 800080c:	40011000 	.word	0x40011000
 8000810:	080012d4 	.word	0x080012d4

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f000 f8e2 	bl	8000a0c <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20020000 	.word	0x20020000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000084 	.word	0x20000084
 800087c:	200000a0 	.word	0x200000a0

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <SystemInit+0x28>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <SystemInit+0x28>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SystemInit+0x28>)
 8000896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800089a:	609a      	str	r2, [r3, #8]
#endif
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2, plln;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	2302      	movs	r3, #2
 80008c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d011      	beq.n	80008fa <SystemCoreClockUpdate+0x4e>
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	2b08      	cmp	r3, #8
 80008da:	d84a      	bhi.n	8000972 <SystemCoreClockUpdate+0xc6>
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <SystemCoreClockUpdate+0x3e>
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d004      	beq.n	80008f2 <SystemCoreClockUpdate+0x46>
 80008e8:	e043      	b.n	8000972 <SystemCoreClockUpdate+0xc6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <SystemCoreClockUpdate+0x100>)
 80008ee:	601a      	str	r2, [r3, #0]
      break;
 80008f0:	e043      	b.n	800097a <SystemCoreClockUpdate+0xce>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 80008f4:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <SystemCoreClockUpdate+0x104>)
 80008f6:	601a      	str	r2, [r3, #0]
      break;
 80008f8:	e03f      	b.n	800097a <SystemCoreClockUpdate+0xce>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	0d9b      	lsrs	r3, r3, #22
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800090e:	607b      	str	r3, [r7, #4]
      plln = RCC->PLLCFGR & RCC_PLLCFGR_PLLN;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000918:	4013      	ands	r3, r2
 800091a:	603b      	str	r3, [r7, #0]

      if (pllsource != 0)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00c      	beq.n	800093c <SystemCoreClockUpdate+0x90>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <SystemCoreClockUpdate+0x104>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 800092c:	6852      	ldr	r2, [r2, #4]
 800092e:	0992      	lsrs	r2, r2, #6
 8000930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e00b      	b.n	8000954 <SystemCoreClockUpdate+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */

        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <SystemCoreClockUpdate+0x100>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	fbb2 f3f3 	udiv	r3, r2, r3
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000946:	6852      	ldr	r2, [r2, #4]
 8000948:	0992      	lsrs	r2, r2, #6
 800094a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	3301      	adds	r3, #1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 800096e:	6013      	str	r3, [r2, #0]
      break;
 8000970:	e003      	b.n	800097a <SystemCoreClockUpdate+0xce>
    default:
      SystemCoreClock = HSI_VALUE;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <SystemCoreClockUpdate+0x100>)
 8000976:	601a      	str	r2, [r3, #0]
      break;
 8000978:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <SystemCoreClockUpdate+0xf8>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	f003 030f 	and.w	r3, r3, #15
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <SystemCoreClockUpdate+0x108>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	fa22 f303 	lsr.w	r3, r2, r3
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <SystemCoreClockUpdate+0xfc>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800
 80009a8:	20000000 	.word	0x20000000
 80009ac:	00f42400 	.word	0x00f42400
 80009b0:	017d7840 	.word	0x017d7840
 80009b4:	08001304 	.word	0x08001304

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f7ff ff60 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e6:	f000 f817 	bl	8000a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fef5 	bl	80007d8 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009fc:	080013b0 	.word	0x080013b0
  ldr r2, =_sbss
 8000a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a04:	200000a0 	.word	0x200000a0

08000a08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <__errno>:
 8000a0c:	4b01      	ldr	r3, [pc, #4]	; (8000a14 <__errno+0x8>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000004 	.word	0x20000004

08000a18 <__libc_init_array>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	4d0d      	ldr	r5, [pc, #52]	; (8000a50 <__libc_init_array+0x38>)
 8000a1c:	4c0d      	ldr	r4, [pc, #52]	; (8000a54 <__libc_init_array+0x3c>)
 8000a1e:	1b64      	subs	r4, r4, r5
 8000a20:	10a4      	asrs	r4, r4, #2
 8000a22:	2600      	movs	r6, #0
 8000a24:	42a6      	cmp	r6, r4
 8000a26:	d109      	bne.n	8000a3c <__libc_init_array+0x24>
 8000a28:	4d0b      	ldr	r5, [pc, #44]	; (8000a58 <__libc_init_array+0x40>)
 8000a2a:	4c0c      	ldr	r4, [pc, #48]	; (8000a5c <__libc_init_array+0x44>)
 8000a2c:	f000 fc46 	bl	80012bc <_init>
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	10a4      	asrs	r4, r4, #2
 8000a34:	2600      	movs	r6, #0
 8000a36:	42a6      	cmp	r6, r4
 8000a38:	d105      	bne.n	8000a46 <__libc_init_array+0x2e>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a40:	4798      	blx	r3
 8000a42:	3601      	adds	r6, #1
 8000a44:	e7ee      	b.n	8000a24 <__libc_init_array+0xc>
 8000a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4a:	4798      	blx	r3
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	e7f2      	b.n	8000a36 <__libc_init_array+0x1e>
 8000a50:	080013a8 	.word	0x080013a8
 8000a54:	080013a8 	.word	0x080013a8
 8000a58:	080013a8 	.word	0x080013a8
 8000a5c:	080013ac 	.word	0x080013ac

08000a60 <_vsiprintf_r>:
 8000a60:	b500      	push	{lr}
 8000a62:	b09b      	sub	sp, #108	; 0x6c
 8000a64:	9100      	str	r1, [sp, #0]
 8000a66:	9104      	str	r1, [sp, #16]
 8000a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a6c:	9105      	str	r1, [sp, #20]
 8000a6e:	9102      	str	r1, [sp, #8]
 8000a70:	4905      	ldr	r1, [pc, #20]	; (8000a88 <_vsiprintf_r+0x28>)
 8000a72:	9103      	str	r1, [sp, #12]
 8000a74:	4669      	mov	r1, sp
 8000a76:	f000 f8cb 	bl	8000c10 <_svfiprintf_r>
 8000a7a:	9b00      	ldr	r3, [sp, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	b01b      	add	sp, #108	; 0x6c
 8000a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a86:	bf00      	nop
 8000a88:	ffff0208 	.word	0xffff0208

08000a8c <vsiprintf>:
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	460a      	mov	r2, r1
 8000a90:	4601      	mov	r1, r0
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <vsiprintf+0x10>)
 8000a94:	6800      	ldr	r0, [r0, #0]
 8000a96:	f7ff bfe3 	b.w	8000a60 <_vsiprintf_r>
 8000a9a:	bf00      	nop
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <__retarget_lock_acquire_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_release_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <_malloc_r>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	1ccd      	adds	r5, r1, #3
 8000aa8:	f025 0503 	bic.w	r5, r5, #3
 8000aac:	3508      	adds	r5, #8
 8000aae:	2d0c      	cmp	r5, #12
 8000ab0:	bf38      	it	cc
 8000ab2:	250c      	movcc	r5, #12
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	4606      	mov	r6, r0
 8000ab8:	db01      	blt.n	8000abe <_malloc_r+0x1a>
 8000aba:	42a9      	cmp	r1, r5
 8000abc:	d903      	bls.n	8000ac6 <_malloc_r+0x22>
 8000abe:	230c      	movs	r3, #12
 8000ac0:	6033      	str	r3, [r6, #0]
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac6:	f000 fb6f 	bl	80011a8 <__malloc_lock>
 8000aca:	4921      	ldr	r1, [pc, #132]	; (8000b50 <_malloc_r+0xac>)
 8000acc:	680a      	ldr	r2, [r1, #0]
 8000ace:	4614      	mov	r4, r2
 8000ad0:	b99c      	cbnz	r4, 8000afa <_malloc_r+0x56>
 8000ad2:	4f20      	ldr	r7, [pc, #128]	; (8000b54 <_malloc_r+0xb0>)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b923      	cbnz	r3, 8000ae2 <_malloc_r+0x3e>
 8000ad8:	4621      	mov	r1, r4
 8000ada:	4630      	mov	r0, r6
 8000adc:	f000 fb2c 	bl	8001138 <_sbrk_r>
 8000ae0:	6038      	str	r0, [r7, #0]
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f000 fb27 	bl	8001138 <_sbrk_r>
 8000aea:	1c43      	adds	r3, r0, #1
 8000aec:	d123      	bne.n	8000b36 <_malloc_r+0x92>
 8000aee:	230c      	movs	r3, #12
 8000af0:	6033      	str	r3, [r6, #0]
 8000af2:	4630      	mov	r0, r6
 8000af4:	f000 fb5e 	bl	80011b4 <__malloc_unlock>
 8000af8:	e7e3      	b.n	8000ac2 <_malloc_r+0x1e>
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	1b5b      	subs	r3, r3, r5
 8000afe:	d417      	bmi.n	8000b30 <_malloc_r+0x8c>
 8000b00:	2b0b      	cmp	r3, #11
 8000b02:	d903      	bls.n	8000b0c <_malloc_r+0x68>
 8000b04:	6023      	str	r3, [r4, #0]
 8000b06:	441c      	add	r4, r3
 8000b08:	6025      	str	r5, [r4, #0]
 8000b0a:	e004      	b.n	8000b16 <_malloc_r+0x72>
 8000b0c:	6863      	ldr	r3, [r4, #4]
 8000b0e:	42a2      	cmp	r2, r4
 8000b10:	bf0c      	ite	eq
 8000b12:	600b      	streq	r3, [r1, #0]
 8000b14:	6053      	strne	r3, [r2, #4]
 8000b16:	4630      	mov	r0, r6
 8000b18:	f000 fb4c 	bl	80011b4 <__malloc_unlock>
 8000b1c:	f104 000b 	add.w	r0, r4, #11
 8000b20:	1d23      	adds	r3, r4, #4
 8000b22:	f020 0007 	bic.w	r0, r0, #7
 8000b26:	1ac2      	subs	r2, r0, r3
 8000b28:	d0cc      	beq.n	8000ac4 <_malloc_r+0x20>
 8000b2a:	1a1b      	subs	r3, r3, r0
 8000b2c:	50a3      	str	r3, [r4, r2]
 8000b2e:	e7c9      	b.n	8000ac4 <_malloc_r+0x20>
 8000b30:	4622      	mov	r2, r4
 8000b32:	6864      	ldr	r4, [r4, #4]
 8000b34:	e7cc      	b.n	8000ad0 <_malloc_r+0x2c>
 8000b36:	1cc4      	adds	r4, r0, #3
 8000b38:	f024 0403 	bic.w	r4, r4, #3
 8000b3c:	42a0      	cmp	r0, r4
 8000b3e:	d0e3      	beq.n	8000b08 <_malloc_r+0x64>
 8000b40:	1a21      	subs	r1, r4, r0
 8000b42:	4630      	mov	r0, r6
 8000b44:	f000 faf8 	bl	8001138 <_sbrk_r>
 8000b48:	3001      	adds	r0, #1
 8000b4a:	d1dd      	bne.n	8000b08 <_malloc_r+0x64>
 8000b4c:	e7cf      	b.n	8000aee <_malloc_r+0x4a>
 8000b4e:	bf00      	nop
 8000b50:	20000088 	.word	0x20000088
 8000b54:	2000008c 	.word	0x2000008c

08000b58 <__ssputs_r>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	688e      	ldr	r6, [r1, #8]
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	4682      	mov	sl, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	4690      	mov	r8, r2
 8000b66:	461f      	mov	r7, r3
 8000b68:	d838      	bhi.n	8000bdc <__ssputs_r+0x84>
 8000b6a:	898a      	ldrh	r2, [r1, #12]
 8000b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b70:	d032      	beq.n	8000bd8 <__ssputs_r+0x80>
 8000b72:	6825      	ldr	r5, [r4, #0]
 8000b74:	6909      	ldr	r1, [r1, #16]
 8000b76:	eba5 0901 	sub.w	r9, r5, r1
 8000b7a:	6965      	ldr	r5, [r4, #20]
 8000b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b84:	3301      	adds	r3, #1
 8000b86:	444b      	add	r3, r9
 8000b88:	106d      	asrs	r5, r5, #1
 8000b8a:	429d      	cmp	r5, r3
 8000b8c:	bf38      	it	cc
 8000b8e:	461d      	movcc	r5, r3
 8000b90:	0553      	lsls	r3, r2, #21
 8000b92:	d531      	bpl.n	8000bf8 <__ssputs_r+0xa0>
 8000b94:	4629      	mov	r1, r5
 8000b96:	f7ff ff85 	bl	8000aa4 <_malloc_r>
 8000b9a:	4606      	mov	r6, r0
 8000b9c:	b950      	cbnz	r0, 8000bb4 <__ssputs_r+0x5c>
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	f8ca 3000 	str.w	r3, [sl]
 8000ba4:	89a3      	ldrh	r3, [r4, #12]
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	81a3      	strh	r3, [r4, #12]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb4:	6921      	ldr	r1, [r4, #16]
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	f000 face 	bl	8001158 <memcpy>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc6:	81a3      	strh	r3, [r4, #12]
 8000bc8:	6126      	str	r6, [r4, #16]
 8000bca:	6165      	str	r5, [r4, #20]
 8000bcc:	444e      	add	r6, r9
 8000bce:	eba5 0509 	sub.w	r5, r5, r9
 8000bd2:	6026      	str	r6, [r4, #0]
 8000bd4:	60a5      	str	r5, [r4, #8]
 8000bd6:	463e      	mov	r6, r7
 8000bd8:	42be      	cmp	r6, r7
 8000bda:	d900      	bls.n	8000bde <__ssputs_r+0x86>
 8000bdc:	463e      	mov	r6, r7
 8000bde:	4632      	mov	r2, r6
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	4641      	mov	r1, r8
 8000be4:	f000 fac6 	bl	8001174 <memmove>
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	1b9b      	subs	r3, r3, r6
 8000bee:	4432      	add	r2, r6
 8000bf0:	60a3      	str	r3, [r4, #8]
 8000bf2:	6022      	str	r2, [r4, #0]
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e7db      	b.n	8000bb0 <__ssputs_r+0x58>
 8000bf8:	462a      	mov	r2, r5
 8000bfa:	f000 fb31 	bl	8001260 <_realloc_r>
 8000bfe:	4606      	mov	r6, r0
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d1e1      	bne.n	8000bc8 <__ssputs_r+0x70>
 8000c04:	6921      	ldr	r1, [r4, #16]
 8000c06:	4650      	mov	r0, sl
 8000c08:	f000 fada 	bl	80011c0 <_free_r>
 8000c0c:	e7c7      	b.n	8000b9e <__ssputs_r+0x46>
	...

08000c10 <_svfiprintf_r>:
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c14:	4698      	mov	r8, r3
 8000c16:	898b      	ldrh	r3, [r1, #12]
 8000c18:	061b      	lsls	r3, r3, #24
 8000c1a:	b09d      	sub	sp, #116	; 0x74
 8000c1c:	4607      	mov	r7, r0
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4614      	mov	r4, r2
 8000c22:	d50e      	bpl.n	8000c42 <_svfiprintf_r+0x32>
 8000c24:	690b      	ldr	r3, [r1, #16]
 8000c26:	b963      	cbnz	r3, 8000c42 <_svfiprintf_r+0x32>
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	f7ff ff3b 	bl	8000aa4 <_malloc_r>
 8000c2e:	6028      	str	r0, [r5, #0]
 8000c30:	6128      	str	r0, [r5, #16]
 8000c32:	b920      	cbnz	r0, 8000c3e <_svfiprintf_r+0x2e>
 8000c34:	230c      	movs	r3, #12
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	e0d1      	b.n	8000de2 <_svfiprintf_r+0x1d2>
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	616b      	str	r3, [r5, #20]
 8000c42:	2300      	movs	r3, #0
 8000c44:	9309      	str	r3, [sp, #36]	; 0x24
 8000c46:	2320      	movs	r3, #32
 8000c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c50:	2330      	movs	r3, #48	; 0x30
 8000c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000dfc <_svfiprintf_r+0x1ec>
 8000c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c5a:	f04f 0901 	mov.w	r9, #1
 8000c5e:	4623      	mov	r3, r4
 8000c60:	469a      	mov	sl, r3
 8000c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c66:	b10a      	cbz	r2, 8000c6c <_svfiprintf_r+0x5c>
 8000c68:	2a25      	cmp	r2, #37	; 0x25
 8000c6a:	d1f9      	bne.n	8000c60 <_svfiprintf_r+0x50>
 8000c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8000c70:	d00b      	beq.n	8000c8a <_svfiprintf_r+0x7a>
 8000c72:	465b      	mov	r3, fp
 8000c74:	4622      	mov	r2, r4
 8000c76:	4629      	mov	r1, r5
 8000c78:	4638      	mov	r0, r7
 8000c7a:	f7ff ff6d 	bl	8000b58 <__ssputs_r>
 8000c7e:	3001      	adds	r0, #1
 8000c80:	f000 80aa 	beq.w	8000dd8 <_svfiprintf_r+0x1c8>
 8000c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c86:	445a      	add	r2, fp
 8000c88:	9209      	str	r2, [sp, #36]	; 0x24
 8000c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80a2 	beq.w	8000dd8 <_svfiprintf_r+0x1c8>
 8000c94:	2300      	movs	r3, #0
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c9e:	f10a 0a01 	add.w	sl, sl, #1
 8000ca2:	9304      	str	r3, [sp, #16]
 8000ca4:	9307      	str	r3, [sp, #28]
 8000ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000caa:	931a      	str	r3, [sp, #104]	; 0x68
 8000cac:	4654      	mov	r4, sl
 8000cae:	2205      	movs	r2, #5
 8000cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cb4:	4851      	ldr	r0, [pc, #324]	; (8000dfc <_svfiprintf_r+0x1ec>)
 8000cb6:	f7ff fa9b 	bl	80001f0 <memchr>
 8000cba:	9a04      	ldr	r2, [sp, #16]
 8000cbc:	b9d8      	cbnz	r0, 8000cf6 <_svfiprintf_r+0xe6>
 8000cbe:	06d0      	lsls	r0, r2, #27
 8000cc0:	bf44      	itt	mi
 8000cc2:	2320      	movmi	r3, #32
 8000cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cc8:	0711      	lsls	r1, r2, #28
 8000cca:	bf44      	itt	mi
 8000ccc:	232b      	movmi	r3, #43	; 0x2b
 8000cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8000cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8000cd8:	d015      	beq.n	8000d06 <_svfiprintf_r+0xf6>
 8000cda:	9a07      	ldr	r2, [sp, #28]
 8000cdc:	4654      	mov	r4, sl
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f04f 0c0a 	mov.w	ip, #10
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cea:	3b30      	subs	r3, #48	; 0x30
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d94e      	bls.n	8000d8e <_svfiprintf_r+0x17e>
 8000cf0:	b1b0      	cbz	r0, 8000d20 <_svfiprintf_r+0x110>
 8000cf2:	9207      	str	r2, [sp, #28]
 8000cf4:	e014      	b.n	8000d20 <_svfiprintf_r+0x110>
 8000cf6:	eba0 0308 	sub.w	r3, r0, r8
 8000cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	46a2      	mov	sl, r4
 8000d04:	e7d2      	b.n	8000cac <_svfiprintf_r+0x9c>
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	1d19      	adds	r1, r3, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	9103      	str	r1, [sp, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bfbb      	ittet	lt
 8000d12:	425b      	neglt	r3, r3
 8000d14:	f042 0202 	orrlt.w	r2, r2, #2
 8000d18:	9307      	strge	r3, [sp, #28]
 8000d1a:	9307      	strlt	r3, [sp, #28]
 8000d1c:	bfb8      	it	lt
 8000d1e:	9204      	strlt	r2, [sp, #16]
 8000d20:	7823      	ldrb	r3, [r4, #0]
 8000d22:	2b2e      	cmp	r3, #46	; 0x2e
 8000d24:	d10c      	bne.n	8000d40 <_svfiprintf_r+0x130>
 8000d26:	7863      	ldrb	r3, [r4, #1]
 8000d28:	2b2a      	cmp	r3, #42	; 0x2a
 8000d2a:	d135      	bne.n	8000d98 <_svfiprintf_r+0x188>
 8000d2c:	9b03      	ldr	r3, [sp, #12]
 8000d2e:	1d1a      	adds	r2, r3, #4
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	9203      	str	r2, [sp, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bfb8      	it	lt
 8000d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d3c:	3402      	adds	r4, #2
 8000d3e:	9305      	str	r3, [sp, #20]
 8000d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000e0c <_svfiprintf_r+0x1fc>
 8000d44:	7821      	ldrb	r1, [r4, #0]
 8000d46:	2203      	movs	r2, #3
 8000d48:	4650      	mov	r0, sl
 8000d4a:	f7ff fa51 	bl	80001f0 <memchr>
 8000d4e:	b140      	cbz	r0, 8000d62 <_svfiprintf_r+0x152>
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	eba0 000a 	sub.w	r0, r0, sl
 8000d56:	fa03 f000 	lsl.w	r0, r3, r0
 8000d5a:	9b04      	ldr	r3, [sp, #16]
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	3401      	adds	r4, #1
 8000d60:	9304      	str	r3, [sp, #16]
 8000d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d66:	4826      	ldr	r0, [pc, #152]	; (8000e00 <_svfiprintf_r+0x1f0>)
 8000d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d6c:	2206      	movs	r2, #6
 8000d6e:	f7ff fa3f 	bl	80001f0 <memchr>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d038      	beq.n	8000de8 <_svfiprintf_r+0x1d8>
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <_svfiprintf_r+0x1f4>)
 8000d78:	bb1b      	cbnz	r3, 8000dc2 <_svfiprintf_r+0x1b2>
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	3307      	adds	r3, #7
 8000d7e:	f023 0307 	bic.w	r3, r3, #7
 8000d82:	3308      	adds	r3, #8
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d88:	4433      	add	r3, r6
 8000d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d8c:	e767      	b.n	8000c5e <_svfiprintf_r+0x4e>
 8000d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d92:	460c      	mov	r4, r1
 8000d94:	2001      	movs	r0, #1
 8000d96:	e7a5      	b.n	8000ce4 <_svfiprintf_r+0xd4>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	3401      	adds	r4, #1
 8000d9c:	9305      	str	r3, [sp, #20]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 0c0a 	mov.w	ip, #10
 8000da4:	4620      	mov	r0, r4
 8000da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000daa:	3a30      	subs	r2, #48	; 0x30
 8000dac:	2a09      	cmp	r2, #9
 8000dae:	d903      	bls.n	8000db8 <_svfiprintf_r+0x1a8>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0c5      	beq.n	8000d40 <_svfiprintf_r+0x130>
 8000db4:	9105      	str	r1, [sp, #20]
 8000db6:	e7c3      	b.n	8000d40 <_svfiprintf_r+0x130>
 8000db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e7f0      	b.n	8000da4 <_svfiprintf_r+0x194>
 8000dc2:	ab03      	add	r3, sp, #12
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	462a      	mov	r2, r5
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <_svfiprintf_r+0x1f8>)
 8000dca:	a904      	add	r1, sp, #16
 8000dcc:	4638      	mov	r0, r7
 8000dce:	f3af 8000 	nop.w
 8000dd2:	1c42      	adds	r2, r0, #1
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	d1d6      	bne.n	8000d86 <_svfiprintf_r+0x176>
 8000dd8:	89ab      	ldrh	r3, [r5, #12]
 8000dda:	065b      	lsls	r3, r3, #25
 8000ddc:	f53f af2c 	bmi.w	8000c38 <_svfiprintf_r+0x28>
 8000de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000de2:	b01d      	add	sp, #116	; 0x74
 8000de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de8:	ab03      	add	r3, sp, #12
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	462a      	mov	r2, r5
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <_svfiprintf_r+0x1f8>)
 8000df0:	a904      	add	r1, sp, #16
 8000df2:	4638      	mov	r0, r7
 8000df4:	f000 f87a 	bl	8000eec <_printf_i>
 8000df8:	e7eb      	b.n	8000dd2 <_svfiprintf_r+0x1c2>
 8000dfa:	bf00      	nop
 8000dfc:	08001374 	.word	0x08001374
 8000e00:	0800137e 	.word	0x0800137e
 8000e04:	00000000 	.word	0x00000000
 8000e08:	08000b59 	.word	0x08000b59
 8000e0c:	0800137a 	.word	0x0800137a

08000e10 <_printf_common>:
 8000e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e14:	4616      	mov	r6, r2
 8000e16:	4699      	mov	r9, r3
 8000e18:	688a      	ldr	r2, [r1, #8]
 8000e1a:	690b      	ldr	r3, [r1, #16]
 8000e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	bfb8      	it	lt
 8000e24:	4613      	movlt	r3, r2
 8000e26:	6033      	str	r3, [r6, #0]
 8000e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e2c:	4607      	mov	r7, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	b10a      	cbz	r2, 8000e36 <_printf_common+0x26>
 8000e32:	3301      	adds	r3, #1
 8000e34:	6033      	str	r3, [r6, #0]
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	0699      	lsls	r1, r3, #26
 8000e3a:	bf42      	ittt	mi
 8000e3c:	6833      	ldrmi	r3, [r6, #0]
 8000e3e:	3302      	addmi	r3, #2
 8000e40:	6033      	strmi	r3, [r6, #0]
 8000e42:	6825      	ldr	r5, [r4, #0]
 8000e44:	f015 0506 	ands.w	r5, r5, #6
 8000e48:	d106      	bne.n	8000e58 <_printf_common+0x48>
 8000e4a:	f104 0a19 	add.w	sl, r4, #25
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	6832      	ldr	r2, [r6, #0]
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	dc26      	bgt.n	8000ea6 <_printf_common+0x96>
 8000e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e5c:	1e13      	subs	r3, r2, #0
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	bf18      	it	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	0692      	lsls	r2, r2, #26
 8000e66:	d42b      	bmi.n	8000ec0 <_printf_common+0xb0>
 8000e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	4638      	mov	r0, r7
 8000e70:	47c0      	blx	r8
 8000e72:	3001      	adds	r0, #1
 8000e74:	d01e      	beq.n	8000eb4 <_printf_common+0xa4>
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	68e5      	ldr	r5, [r4, #12]
 8000e7a:	6832      	ldr	r2, [r6, #0]
 8000e7c:	f003 0306 	and.w	r3, r3, #6
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	bf08      	it	eq
 8000e84:	1aad      	subeq	r5, r5, r2
 8000e86:	68a3      	ldr	r3, [r4, #8]
 8000e88:	6922      	ldr	r2, [r4, #16]
 8000e8a:	bf0c      	ite	eq
 8000e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e90:	2500      	movne	r5, #0
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bfc4      	itt	gt
 8000e96:	1a9b      	subgt	r3, r3, r2
 8000e98:	18ed      	addgt	r5, r5, r3
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	341a      	adds	r4, #26
 8000e9e:	42b5      	cmp	r5, r6
 8000ea0:	d11a      	bne.n	8000ed8 <_printf_common+0xc8>
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	e008      	b.n	8000eb8 <_printf_common+0xa8>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	4652      	mov	r2, sl
 8000eaa:	4649      	mov	r1, r9
 8000eac:	4638      	mov	r0, r7
 8000eae:	47c0      	blx	r8
 8000eb0:	3001      	adds	r0, #1
 8000eb2:	d103      	bne.n	8000ebc <_printf_common+0xac>
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	e7c6      	b.n	8000e4e <_printf_common+0x3e>
 8000ec0:	18e1      	adds	r1, r4, r3
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	2030      	movs	r0, #48	; 0x30
 8000ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000eca:	4422      	add	r2, r4
 8000ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	e7c7      	b.n	8000e68 <_printf_common+0x58>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4622      	mov	r2, r4
 8000edc:	4649      	mov	r1, r9
 8000ede:	4638      	mov	r0, r7
 8000ee0:	47c0      	blx	r8
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d0e6      	beq.n	8000eb4 <_printf_common+0xa4>
 8000ee6:	3601      	adds	r6, #1
 8000ee8:	e7d9      	b.n	8000e9e <_printf_common+0x8e>
	...

08000eec <_printf_i>:
 8000eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	4691      	mov	r9, r2
 8000ef4:	7e27      	ldrb	r7, [r4, #24]
 8000ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ef8:	2f78      	cmp	r7, #120	; 0x78
 8000efa:	4680      	mov	r8, r0
 8000efc:	469a      	mov	sl, r3
 8000efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f02:	d807      	bhi.n	8000f14 <_printf_i+0x28>
 8000f04:	2f62      	cmp	r7, #98	; 0x62
 8000f06:	d80a      	bhi.n	8000f1e <_printf_i+0x32>
 8000f08:	2f00      	cmp	r7, #0
 8000f0a:	f000 80d8 	beq.w	80010be <_printf_i+0x1d2>
 8000f0e:	2f58      	cmp	r7, #88	; 0x58
 8000f10:	f000 80a3 	beq.w	800105a <_printf_i+0x16e>
 8000f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f1c:	e03a      	b.n	8000f94 <_printf_i+0xa8>
 8000f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f22:	2b15      	cmp	r3, #21
 8000f24:	d8f6      	bhi.n	8000f14 <_printf_i+0x28>
 8000f26:	a001      	add	r0, pc, #4	; (adr r0, 8000f2c <_printf_i+0x40>)
 8000f28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000f2c:	08000f85 	.word	0x08000f85
 8000f30:	08000f99 	.word	0x08000f99
 8000f34:	08000f15 	.word	0x08000f15
 8000f38:	08000f15 	.word	0x08000f15
 8000f3c:	08000f15 	.word	0x08000f15
 8000f40:	08000f15 	.word	0x08000f15
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000f15 	.word	0x08000f15
 8000f4c:	08000f15 	.word	0x08000f15
 8000f50:	08000f15 	.word	0x08000f15
 8000f54:	08000f15 	.word	0x08000f15
 8000f58:	080010a5 	.word	0x080010a5
 8000f5c:	08000fc9 	.word	0x08000fc9
 8000f60:	08001087 	.word	0x08001087
 8000f64:	08000f15 	.word	0x08000f15
 8000f68:	08000f15 	.word	0x08000f15
 8000f6c:	080010c7 	.word	0x080010c7
 8000f70:	08000f15 	.word	0x08000f15
 8000f74:	08000fc9 	.word	0x08000fc9
 8000f78:	08000f15 	.word	0x08000f15
 8000f7c:	08000f15 	.word	0x08000f15
 8000f80:	0800108f 	.word	0x0800108f
 8000f84:	680b      	ldr	r3, [r1, #0]
 8000f86:	1d1a      	adds	r2, r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	600a      	str	r2, [r1, #0]
 8000f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0a3      	b.n	80010e0 <_printf_i+0x1f4>
 8000f98:	6825      	ldr	r5, [r4, #0]
 8000f9a:	6808      	ldr	r0, [r1, #0]
 8000f9c:	062e      	lsls	r6, r5, #24
 8000f9e:	f100 0304 	add.w	r3, r0, #4
 8000fa2:	d50a      	bpl.n	8000fba <_printf_i+0xce>
 8000fa4:	6805      	ldr	r5, [r0, #0]
 8000fa6:	600b      	str	r3, [r1, #0]
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	da03      	bge.n	8000fb4 <_printf_i+0xc8>
 8000fac:	232d      	movs	r3, #45	; 0x2d
 8000fae:	426d      	negs	r5, r5
 8000fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fb4:	485e      	ldr	r0, [pc, #376]	; (8001130 <_printf_i+0x244>)
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	e019      	b.n	8000fee <_printf_i+0x102>
 8000fba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000fbe:	6805      	ldr	r5, [r0, #0]
 8000fc0:	600b      	str	r3, [r1, #0]
 8000fc2:	bf18      	it	ne
 8000fc4:	b22d      	sxthne	r5, r5
 8000fc6:	e7ef      	b.n	8000fa8 <_printf_i+0xbc>
 8000fc8:	680b      	ldr	r3, [r1, #0]
 8000fca:	6825      	ldr	r5, [r4, #0]
 8000fcc:	1d18      	adds	r0, r3, #4
 8000fce:	6008      	str	r0, [r1, #0]
 8000fd0:	0628      	lsls	r0, r5, #24
 8000fd2:	d501      	bpl.n	8000fd8 <_printf_i+0xec>
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	e002      	b.n	8000fde <_printf_i+0xf2>
 8000fd8:	0669      	lsls	r1, r5, #25
 8000fda:	d5fb      	bpl.n	8000fd4 <_printf_i+0xe8>
 8000fdc:	881d      	ldrh	r5, [r3, #0]
 8000fde:	4854      	ldr	r0, [pc, #336]	; (8001130 <_printf_i+0x244>)
 8000fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2308      	moveq	r3, #8
 8000fe6:	230a      	movne	r3, #10
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fee:	6866      	ldr	r6, [r4, #4]
 8000ff0:	60a6      	str	r6, [r4, #8]
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	bfa2      	ittt	ge
 8000ff6:	6821      	ldrge	r1, [r4, #0]
 8000ff8:	f021 0104 	bicge.w	r1, r1, #4
 8000ffc:	6021      	strge	r1, [r4, #0]
 8000ffe:	b90d      	cbnz	r5, 8001004 <_printf_i+0x118>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d04d      	beq.n	80010a0 <_printf_i+0x1b4>
 8001004:	4616      	mov	r6, r2
 8001006:	fbb5 f1f3 	udiv	r1, r5, r3
 800100a:	fb03 5711 	mls	r7, r3, r1, r5
 800100e:	5dc7      	ldrb	r7, [r0, r7]
 8001010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001014:	462f      	mov	r7, r5
 8001016:	42bb      	cmp	r3, r7
 8001018:	460d      	mov	r5, r1
 800101a:	d9f4      	bls.n	8001006 <_printf_i+0x11a>
 800101c:	2b08      	cmp	r3, #8
 800101e:	d10b      	bne.n	8001038 <_printf_i+0x14c>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	07df      	lsls	r7, r3, #31
 8001024:	d508      	bpl.n	8001038 <_printf_i+0x14c>
 8001026:	6923      	ldr	r3, [r4, #16]
 8001028:	6861      	ldr	r1, [r4, #4]
 800102a:	4299      	cmp	r1, r3
 800102c:	bfde      	ittt	le
 800102e:	2330      	movle	r3, #48	; 0x30
 8001030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001034:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001038:	1b92      	subs	r2, r2, r6
 800103a:	6122      	str	r2, [r4, #16]
 800103c:	f8cd a000 	str.w	sl, [sp]
 8001040:	464b      	mov	r3, r9
 8001042:	aa03      	add	r2, sp, #12
 8001044:	4621      	mov	r1, r4
 8001046:	4640      	mov	r0, r8
 8001048:	f7ff fee2 	bl	8000e10 <_printf_common>
 800104c:	3001      	adds	r0, #1
 800104e:	d14c      	bne.n	80010ea <_printf_i+0x1fe>
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	b004      	add	sp, #16
 8001056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105a:	4835      	ldr	r0, [pc, #212]	; (8001130 <_printf_i+0x244>)
 800105c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	680e      	ldr	r6, [r1, #0]
 8001064:	061f      	lsls	r7, r3, #24
 8001066:	f856 5b04 	ldr.w	r5, [r6], #4
 800106a:	600e      	str	r6, [r1, #0]
 800106c:	d514      	bpl.n	8001098 <_printf_i+0x1ac>
 800106e:	07d9      	lsls	r1, r3, #31
 8001070:	bf44      	itt	mi
 8001072:	f043 0320 	orrmi.w	r3, r3, #32
 8001076:	6023      	strmi	r3, [r4, #0]
 8001078:	b91d      	cbnz	r5, 8001082 <_printf_i+0x196>
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f023 0320 	bic.w	r3, r3, #32
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	2310      	movs	r3, #16
 8001084:	e7b0      	b.n	8000fe8 <_printf_i+0xfc>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	2378      	movs	r3, #120	; 0x78
 8001090:	4828      	ldr	r0, [pc, #160]	; (8001134 <_printf_i+0x248>)
 8001092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001096:	e7e3      	b.n	8001060 <_printf_i+0x174>
 8001098:	065e      	lsls	r6, r3, #25
 800109a:	bf48      	it	mi
 800109c:	b2ad      	uxthmi	r5, r5
 800109e:	e7e6      	b.n	800106e <_printf_i+0x182>
 80010a0:	4616      	mov	r6, r2
 80010a2:	e7bb      	b.n	800101c <_printf_i+0x130>
 80010a4:	680b      	ldr	r3, [r1, #0]
 80010a6:	6826      	ldr	r6, [r4, #0]
 80010a8:	6960      	ldr	r0, [r4, #20]
 80010aa:	1d1d      	adds	r5, r3, #4
 80010ac:	600d      	str	r5, [r1, #0]
 80010ae:	0635      	lsls	r5, r6, #24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	d501      	bpl.n	80010b8 <_printf_i+0x1cc>
 80010b4:	6018      	str	r0, [r3, #0]
 80010b6:	e002      	b.n	80010be <_printf_i+0x1d2>
 80010b8:	0671      	lsls	r1, r6, #25
 80010ba:	d5fb      	bpl.n	80010b4 <_printf_i+0x1c8>
 80010bc:	8018      	strh	r0, [r3, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	6123      	str	r3, [r4, #16]
 80010c2:	4616      	mov	r6, r2
 80010c4:	e7ba      	b.n	800103c <_printf_i+0x150>
 80010c6:	680b      	ldr	r3, [r1, #0]
 80010c8:	1d1a      	adds	r2, r3, #4
 80010ca:	600a      	str	r2, [r1, #0]
 80010cc:	681e      	ldr	r6, [r3, #0]
 80010ce:	6862      	ldr	r2, [r4, #4]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4630      	mov	r0, r6
 80010d4:	f7ff f88c 	bl	80001f0 <memchr>
 80010d8:	b108      	cbz	r0, 80010de <_printf_i+0x1f2>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	6060      	str	r0, [r4, #4]
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	6123      	str	r3, [r4, #16]
 80010e2:	2300      	movs	r3, #0
 80010e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010e8:	e7a8      	b.n	800103c <_printf_i+0x150>
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	4632      	mov	r2, r6
 80010ee:	4649      	mov	r1, r9
 80010f0:	4640      	mov	r0, r8
 80010f2:	47d0      	blx	sl
 80010f4:	3001      	adds	r0, #1
 80010f6:	d0ab      	beq.n	8001050 <_printf_i+0x164>
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	079b      	lsls	r3, r3, #30
 80010fc:	d413      	bmi.n	8001126 <_printf_i+0x23a>
 80010fe:	68e0      	ldr	r0, [r4, #12]
 8001100:	9b03      	ldr	r3, [sp, #12]
 8001102:	4298      	cmp	r0, r3
 8001104:	bfb8      	it	lt
 8001106:	4618      	movlt	r0, r3
 8001108:	e7a4      	b.n	8001054 <_printf_i+0x168>
 800110a:	2301      	movs	r3, #1
 800110c:	4632      	mov	r2, r6
 800110e:	4649      	mov	r1, r9
 8001110:	4640      	mov	r0, r8
 8001112:	47d0      	blx	sl
 8001114:	3001      	adds	r0, #1
 8001116:	d09b      	beq.n	8001050 <_printf_i+0x164>
 8001118:	3501      	adds	r5, #1
 800111a:	68e3      	ldr	r3, [r4, #12]
 800111c:	9903      	ldr	r1, [sp, #12]
 800111e:	1a5b      	subs	r3, r3, r1
 8001120:	42ab      	cmp	r3, r5
 8001122:	dcf2      	bgt.n	800110a <_printf_i+0x21e>
 8001124:	e7eb      	b.n	80010fe <_printf_i+0x212>
 8001126:	2500      	movs	r5, #0
 8001128:	f104 0619 	add.w	r6, r4, #25
 800112c:	e7f5      	b.n	800111a <_printf_i+0x22e>
 800112e:	bf00      	nop
 8001130:	08001385 	.word	0x08001385
 8001134:	08001396 	.word	0x08001396

08001138 <_sbrk_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4d06      	ldr	r5, [pc, #24]	; (8001154 <_sbrk_r+0x1c>)
 800113c:	2300      	movs	r3, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	602b      	str	r3, [r5, #0]
 8001144:	f7ff fb66 	bl	8000814 <_sbrk>
 8001148:	1c43      	adds	r3, r0, #1
 800114a:	d102      	bne.n	8001152 <_sbrk_r+0x1a>
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	b103      	cbz	r3, 8001152 <_sbrk_r+0x1a>
 8001150:	6023      	str	r3, [r4, #0]
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	2000009c 	.word	0x2000009c

08001158 <memcpy>:
 8001158:	440a      	add	r2, r1
 800115a:	4291      	cmp	r1, r2
 800115c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001160:	d100      	bne.n	8001164 <memcpy+0xc>
 8001162:	4770      	bx	lr
 8001164:	b510      	push	{r4, lr}
 8001166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800116a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800116e:	4291      	cmp	r1, r2
 8001170:	d1f9      	bne.n	8001166 <memcpy+0xe>
 8001172:	bd10      	pop	{r4, pc}

08001174 <memmove>:
 8001174:	4288      	cmp	r0, r1
 8001176:	b510      	push	{r4, lr}
 8001178:	eb01 0402 	add.w	r4, r1, r2
 800117c:	d902      	bls.n	8001184 <memmove+0x10>
 800117e:	4284      	cmp	r4, r0
 8001180:	4623      	mov	r3, r4
 8001182:	d807      	bhi.n	8001194 <memmove+0x20>
 8001184:	1e43      	subs	r3, r0, #1
 8001186:	42a1      	cmp	r1, r4
 8001188:	d008      	beq.n	800119c <memmove+0x28>
 800118a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800118e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001192:	e7f8      	b.n	8001186 <memmove+0x12>
 8001194:	4402      	add	r2, r0
 8001196:	4601      	mov	r1, r0
 8001198:	428a      	cmp	r2, r1
 800119a:	d100      	bne.n	800119e <memmove+0x2a>
 800119c:	bd10      	pop	{r4, pc}
 800119e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011a6:	e7f7      	b.n	8001198 <memmove+0x24>

080011a8 <__malloc_lock>:
 80011a8:	4801      	ldr	r0, [pc, #4]	; (80011b0 <__malloc_lock+0x8>)
 80011aa:	f7ff bc79 	b.w	8000aa0 <__retarget_lock_acquire_recursive>
 80011ae:	bf00      	nop
 80011b0:	20000094 	.word	0x20000094

080011b4 <__malloc_unlock>:
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <__malloc_unlock+0x8>)
 80011b6:	f7ff bc74 	b.w	8000aa2 <__retarget_lock_release_recursive>
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094

080011c0 <_free_r>:
 80011c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d048      	beq.n	8001258 <_free_r+0x98>
 80011c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011ca:	9001      	str	r0, [sp, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f1a1 0404 	sub.w	r4, r1, #4
 80011d2:	bfb8      	it	lt
 80011d4:	18e4      	addlt	r4, r4, r3
 80011d6:	f7ff ffe7 	bl	80011a8 <__malloc_lock>
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <_free_r+0x9c>)
 80011dc:	9801      	ldr	r0, [sp, #4]
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	4615      	mov	r5, r2
 80011e2:	b933      	cbnz	r3, 80011f2 <_free_r+0x32>
 80011e4:	6063      	str	r3, [r4, #4]
 80011e6:	6014      	str	r4, [r2, #0]
 80011e8:	b003      	add	sp, #12
 80011ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011ee:	f7ff bfe1 	b.w	80011b4 <__malloc_unlock>
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	d90b      	bls.n	800120e <_free_r+0x4e>
 80011f6:	6821      	ldr	r1, [r4, #0]
 80011f8:	1862      	adds	r2, r4, r1
 80011fa:	4293      	cmp	r3, r2
 80011fc:	bf04      	itt	eq
 80011fe:	681a      	ldreq	r2, [r3, #0]
 8001200:	685b      	ldreq	r3, [r3, #4]
 8001202:	6063      	str	r3, [r4, #4]
 8001204:	bf04      	itt	eq
 8001206:	1852      	addeq	r2, r2, r1
 8001208:	6022      	streq	r2, [r4, #0]
 800120a:	602c      	str	r4, [r5, #0]
 800120c:	e7ec      	b.n	80011e8 <_free_r+0x28>
 800120e:	461a      	mov	r2, r3
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	b10b      	cbz	r3, 8001218 <_free_r+0x58>
 8001214:	42a3      	cmp	r3, r4
 8001216:	d9fa      	bls.n	800120e <_free_r+0x4e>
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	1855      	adds	r5, r2, r1
 800121c:	42a5      	cmp	r5, r4
 800121e:	d10b      	bne.n	8001238 <_free_r+0x78>
 8001220:	6824      	ldr	r4, [r4, #0]
 8001222:	4421      	add	r1, r4
 8001224:	1854      	adds	r4, r2, r1
 8001226:	42a3      	cmp	r3, r4
 8001228:	6011      	str	r1, [r2, #0]
 800122a:	d1dd      	bne.n	80011e8 <_free_r+0x28>
 800122c:	681c      	ldr	r4, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	6053      	str	r3, [r2, #4]
 8001232:	4421      	add	r1, r4
 8001234:	6011      	str	r1, [r2, #0]
 8001236:	e7d7      	b.n	80011e8 <_free_r+0x28>
 8001238:	d902      	bls.n	8001240 <_free_r+0x80>
 800123a:	230c      	movs	r3, #12
 800123c:	6003      	str	r3, [r0, #0]
 800123e:	e7d3      	b.n	80011e8 <_free_r+0x28>
 8001240:	6825      	ldr	r5, [r4, #0]
 8001242:	1961      	adds	r1, r4, r5
 8001244:	428b      	cmp	r3, r1
 8001246:	bf04      	itt	eq
 8001248:	6819      	ldreq	r1, [r3, #0]
 800124a:	685b      	ldreq	r3, [r3, #4]
 800124c:	6063      	str	r3, [r4, #4]
 800124e:	bf04      	itt	eq
 8001250:	1949      	addeq	r1, r1, r5
 8001252:	6021      	streq	r1, [r4, #0]
 8001254:	6054      	str	r4, [r2, #4]
 8001256:	e7c7      	b.n	80011e8 <_free_r+0x28>
 8001258:	b003      	add	sp, #12
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	20000088 	.word	0x20000088

08001260 <_realloc_r>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	4607      	mov	r7, r0
 8001264:	4614      	mov	r4, r2
 8001266:	460e      	mov	r6, r1
 8001268:	b921      	cbnz	r1, 8001274 <_realloc_r+0x14>
 800126a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800126e:	4611      	mov	r1, r2
 8001270:	f7ff bc18 	b.w	8000aa4 <_malloc_r>
 8001274:	b922      	cbnz	r2, 8001280 <_realloc_r+0x20>
 8001276:	f7ff ffa3 	bl	80011c0 <_free_r>
 800127a:	4625      	mov	r5, r4
 800127c:	4628      	mov	r0, r5
 800127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001280:	f000 f814 	bl	80012ac <_malloc_usable_size_r>
 8001284:	42a0      	cmp	r0, r4
 8001286:	d20f      	bcs.n	80012a8 <_realloc_r+0x48>
 8001288:	4621      	mov	r1, r4
 800128a:	4638      	mov	r0, r7
 800128c:	f7ff fc0a 	bl	8000aa4 <_malloc_r>
 8001290:	4605      	mov	r5, r0
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <_realloc_r+0x1c>
 8001296:	4631      	mov	r1, r6
 8001298:	4622      	mov	r2, r4
 800129a:	f7ff ff5d 	bl	8001158 <memcpy>
 800129e:	4631      	mov	r1, r6
 80012a0:	4638      	mov	r0, r7
 80012a2:	f7ff ff8d 	bl	80011c0 <_free_r>
 80012a6:	e7e9      	b.n	800127c <_realloc_r+0x1c>
 80012a8:	4635      	mov	r5, r6
 80012aa:	e7e7      	b.n	800127c <_realloc_r+0x1c>

080012ac <_malloc_usable_size_r>:
 80012ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012b0:	1f18      	subs	r0, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfbc      	itt	lt
 80012b6:	580b      	ldrlt	r3, [r1, r0]
 80012b8:	18c0      	addlt	r0, r0, r3
 80012ba:	4770      	bx	lr

080012bc <_init>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr

080012c8 <_fini>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	bf00      	nop
 80012cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ce:	bc08      	pop	{r3}
 80012d0:	469e      	mov	lr, r3
 80012d2:	4770      	bx	lr
